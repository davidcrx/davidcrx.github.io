{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Instalaci\u00f3n mkdocs con github pages Testing... Proceso de instalaci\u00f3n de mkdocs con github pages detallado en un dominio personalizado. Este sitio sigue la filosofia del tema \"mkdocs-material\". Para mas informaci\u00f3n sobre la plantilla de este tema: squidfunk/mkdocs-material . Primeros pasos ... En primer lugar hemos de crear un repositorio en github: <usuario>.github.io Ex: davidcrx.github.io A partir de ahora github asociar\u00e1 este dominio a una p\u00e1gina web. Lo podemos comprobar accediendo a ella. Ahora nos bajaremos el repositorio para trabajar en local: git clone git@github.com:davidcrx/<username>.github.io.git A continuaci\u00f3n crearemos la siguiente estructura de directorios: - davidcrx.github.io - my-project - docs - CNAME - index.md - material - src - CNAME - mkdocs.yml - package.json - README.md - requirements - setup.py Para copiar las carpetas / ficheros que faltan, lo podemos hacer desde aqu\u00ed. Una vez tengamos el directorio montado, ejecutaremos el siguiente comando: pip install . Esto nos va ejecutar el setup.py que va a instalar el tema \"material\". Una vez tengamos el tema instalado, vamos a ir a la carpeta my_project : cd my_project/ A continuaci\u00f3n vamos a utilizar el comando gh-deploy para lanzar nuestro contenido a gh-pages : mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master Troubleshooting Si queremos subir nuestro proyecto a la branch \"master\" tendremos que posteriormente volver a ejecutar el comando anterior. git add . git commit -m \"first mkdocs\" git push origin master cd my-project/ && mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master","title":"Instalaci\u00f3n mkdocs"},{"location":"#instalacion-mkdocs-con-github-pages","text":"Testing... Proceso de instalaci\u00f3n de mkdocs con github pages detallado en un dominio personalizado. Este sitio sigue la filosofia del tema \"mkdocs-material\". Para mas informaci\u00f3n sobre la plantilla de este tema: squidfunk/mkdocs-material .","title":"Instalaci\u00f3n mkdocs con github pages"},{"location":"#primeros-pasos","text":"En primer lugar hemos de crear un repositorio en github: <usuario>.github.io Ex: davidcrx.github.io A partir de ahora github asociar\u00e1 este dominio a una p\u00e1gina web. Lo podemos comprobar accediendo a ella. Ahora nos bajaremos el repositorio para trabajar en local: git clone git@github.com:davidcrx/<username>.github.io.git A continuaci\u00f3n crearemos la siguiente estructura de directorios: - davidcrx.github.io - my-project - docs - CNAME - index.md - material - src - CNAME - mkdocs.yml - package.json - README.md - requirements - setup.py Para copiar las carpetas / ficheros que faltan, lo podemos hacer desde aqu\u00ed. Una vez tengamos el directorio montado, ejecutaremos el siguiente comando: pip install . Esto nos va ejecutar el setup.py que va a instalar el tema \"material\". Una vez tengamos el tema instalado, vamos a ir a la carpeta my_project : cd my_project/ A continuaci\u00f3n vamos a utilizar el comando gh-deploy para lanzar nuestro contenido a gh-pages : mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master","title":"Primeros pasos ..."},{"location":"#troubleshooting","text":"Si queremos subir nuestro proyecto a la branch \"master\" tendremos que posteriormente volver a ejecutar el comando anterior. git add . git commit -m \"first mkdocs\" git push origin master cd my-project/ && mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master","title":"Troubleshooting"}]}